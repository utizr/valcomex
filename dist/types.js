// Generated by CoffeeScript 1.11.1
(function() {
  var _, isNumberString, regexISO8601,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');


  /* Types:
  	STR - "String type, does not modify content."
  	NUM - "Number type. If number is string if will be converted to number when possible."
  	INT - "Integer type."
  	BOOL - "Check boolean type."
  	DT - "Check iso date"
  	OBJ - "Check if type is object. Recursion is automatic in the app in case of object, and array."
  	ARR - "Check if type is array. Recursion is automatic in the app in case of object, and array."
  
  	OPT - "Optional"
  	REG - "Regular expression."
  	DEF - "Fefined value, only checks if value exists or not, and returns defined value, or result of provided function."
  	LT - Lower than. This can be used for numbers and arrays.
  	GT - Greater than. This can be used for numbers and arrays.
  	IN - In an array. Array has to be supplied in the options
   */

  regexISO8601 = /^(\d{4}-[01]\d-[0-3]\d)[ T]([0-2]\d:[0-5]\d:[0-5]\d)(\.\d+)?([+-][0-2]\d:?[0-5]\d|Z)?$/;

  isNumberString = function(value) {
    if (_.isNumber(value)) {
      return true;
    }
    if (_.isString(value) && value === +value + '') {
      return true;
    }
    return false;
  };

  module.exports = {
    STR: {
      desc: "String type, does not modify content.",
      fn: function(data, options) {
        if (_.isString(data)) {
          return {
            data: data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data is not a String!'
          };
        }
      }
    },
    NUM: {
      desc: "Number type. If number is string, it will be converted to number when possible.",
      fn: function(data, options) {
        if (isNumberString(data)) {
          return {
            data: +data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data is not a Number!'
          };
        }
      }
    },
    INT: {
      desc: "Integer type. If number is string it will be converted to number when possible.",
      fn: function(data, options) {
        if (_.isInteger(+data)) {
          return {
            data: +data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data is not a Integer!'
          };
        }
      }
    },
    BOOL: {
      desc: "Check boolean type.",
      fn: function(data, options) {
        if (_.isBoolean(data)) {
          return {
            data: data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data is not a Boolean!'
          };
        }
      }
    },
    DT: {
      desc: 'ISO8601 date.',
      fn: function(data, options) {
        if (typeof data === 'string' && data.match(regexISO8601)) {
          return {
            data: data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data does not match ISO 8601 date-time format'
          };
        }
      }
    },
    OBJ: {
      desc: "Check if type is object. Recursion is automatic in the app in case of object, and array.",
      fn: function(data, options) {
        if (_.isPlainObject(data)) {
          return {
            data: data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data is not an Object!'
          };
        }
      }
    },
    ARR: {
      desc: "Check if type is array. Recursion is automatic in the app in case of object, and array.",
      fn: function(data, options) {
        if (_.isArray(data)) {
          return {
            data: data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Data is not an Array!'
          };
        }
      }
    },
    OPT: {
      desc: "Optional property.",
      fn: function(data, options) {
        return {
          data: data,
          valid: true,
          message: ''
        };
      }
    },
    REG: {
      desc: "Match regular expression.",
      fn: function(data, options) {
        if (options.test(data)) {
          return {
            data: data,
            valid: true,
            message: ''
          };
        } else {
          return {
            data: data,
            valid: false,
            message: 'Regex failed!'
          };
        }
      }
    },
    DEF: {
      desc: "Defined value, only checks if value exists or not, and returns defined value, or result of provided function",
      fn: function(data, options) {
        var newData;
        if (_.isFunction(options)) {
          newData = options(data);
        } else if (options) {
          newData = options;
        }
        return {
          data: newData,
          valid: true,
          message: ''
        };
      }
    },
    EQ: {
      desc: "Check if value is equal to the supplied one.",
      fn: function(data, options) {
        if (data !== options) {
          return Object({
            data: void 0,
            valid: false,
            message: 'Data does not equal option.'
          });
        } else {
          return Object({
            data: data,
            valid: true,
            message: ''
          });
        }
      }
    },
    LT: {
      desc: "Lower than.",
      fn: function(data, options) {
        if (isNumberString(data)) {
          if (+data < options) {
            return {
              data: +data,
              valid: true,
              message: ''
            };
          } else {
            return {
              data: data,
              valid: false,
              message: 'LT failed!'
            };
          }
        } else if (_.isString(data) || _.isArray(data)) {
          if (data.length < options) {
            return {
              data: data,
              valid: true,
              message: ''
            };
          } else {
            return {
              data: data,
              valid: false,
              message: 'LT failed!'
            };
          }
        } else {
          return {
            data: data,
            valid: false,
            message: 'LT failed!'
          };
        }
      }
    },
    GT: {
      desc: "Greater than.",
      fn: function(data, options) {
        if (isNumberString(data)) {
          if (+data > options) {
            return {
              data: +data,
              valid: true,
              message: ''
            };
          } else {
            return {
              data: data,
              valid: false,
              message: 'GT failed for isNumberString! ' + data + ' >? ' + options
            };
          }
        } else if (_.isString(data) || _.isArray(data)) {
          if (data.length > options) {
            return {
              data: data,
              valid: true,
              message: ''
            };
          } else {
            return {
              data: data,
              valid: false,
              message: 'GT failed for string/array!'
            };
          }
        } else {
          return {
            data: data,
            valid: false,
            message: 'GT failed!'
          };
        }
      }
    },
    IN: {
      desc: "Value is in the specified array",
      fn: function(data, options) {
        if (_.isArray(options)) {
          if (indexOf.call(options, data) >= 0) {
            return {
              data: data,
              valid: true,
              message: ''
            };
          } else {
            return {
              data: data,
              valid: false,
              message: 'IN failed!'
            };
          }
        } else {
          return {
            data: data,
            valid: false,
            message: 'IN failed!'
          };
        }
      }
    },
    NIN: {
      desc: "Value is not in the specified array",
      fn: function(data, options) {
        if (_.isArray(options)) {
          if (indexOf.call(options, data) < 0) {
            return {
              data: data,
              valid: true,
              message: ''
            };
          } else {
            return {
              data: data,
              valid: false,
              message: 'NIN failed!'
            };
          }
        } else {
          return {
            data: data,
            valid: false,
            message: 'NIN failed!'
          };
        }
      }
    }
  };

}).call(this);
