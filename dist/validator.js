// Generated by CoffeeScript 1.11.1
(function() {
  var _;

  _ = require('lodash');

  module.exports = {
    types: require('./types'),
    defines: {},
    define: function(type, obj) {
      return this.defines[type] = obj;
    },
    addType: function(type) {
      return this.types = _.assign(this.types, type);
    },
    start: function(origData, schema) {
      var arrayValue, data, dataOut, i, item, j, len, len1, message, propName, ref, ref1, result, valid, vdtrName, vdtrObject, vdtrValue;
      if (!origData && schema) {
        return {
          data: void 0,
          valid: false,
          message: "Data is undefined"
        };
      }
      data = _.cloneDeep(origData);
      dataOut = {};
      valid = true;
      message = "";
      if (_.isArray(data) && schema.ARR) {
        arrayValue = [];
        for (i = 0, len = data.length; i < len; i++) {
          item = data[i];
          result = this.start({
            arrayField: item
          }, {
            arrayField: schema.ARR
          });
          if (result != null ? result.data.arrayField : void 0) {
            arrayValue.push(result.data.arrayField);
          }
          valid = valid && !!(result != null ? result.valid : void 0);
          if (result.message) {
            message += result.message + '\n';
          }
        }
        dataOut = arrayValue;
        return {
          data: dataOut,
          valid: valid,
          message: message
        };
      }
      for (propName in schema) {
        vdtrObject = schema[propName];
        if (_.isUndefined(data[propName]) && _.isUndefined(dataOut[propName])) {
          if (vdtrObject.DEF) {
            result = this.checkData(data[propName], 'DEF', vdtrObject.DEF);
            dataOut[propName] = result.data;
            data[propName] = result.data;
            valid = valid && !!(result != null ? result.valid : void 0);
            continue;
          }
          if (vdtrObject.OPT) {
            continue;
          }
        }
        for (vdtrName in vdtrObject) {
          vdtrValue = vdtrObject[vdtrName];
          if (vdtrName === 'DEF') {
            continue;
          }
          if (this.defines[vdtrName]) {
            result = this.start({
              arrayField: data[propName]
            }, {
              arrayField: this.defines[vdtrName]
            });
            dataOut[propName] = (ref = result.data) != null ? ref.arrayField : void 0;
            valid = valid && !!(result != null ? result.valid : void 0);
            if (result.message) {
              message += result.message + '\n';
            }
          } else {
            result = this.checkData(data[propName], vdtrName, vdtrValue);
            dataOut[propName] = result.data;
            valid = valid && !!(result != null ? result.valid : void 0);
            if (result.message) {
              message += result.message + '\n';
            }
          }
        }
        if (_.isUndefined(data[propName]) && _.isUndefined(dataOut[propName])) {
          if (!vdtrObject.OPT) {
            message += "'" + propName + "' does not exist. ";
            valid = false;
          }
        }
        if (_.isPlainObject(vdtrObject.OBJ) && !_.isEmpty(vdtrObject.OBJ) && _.isPlainObject(data[propName]) && !_.isEmpty(data[propName])) {
          result = this.start(data[propName], vdtrObject.OBJ);
          if (result != null ? result.data : void 0) {
            dataOut[propName] = result.data;
          }
          valid = valid && !!(result != null ? result.valid : void 0);
          if (result.message) {
            message += result.message + '\n';
          }
        }
        if (_.isPlainObject(vdtrObject.ARR) && !_.isEmpty(vdtrObject.ARR) && _.isArray(data[propName]) && !_.isEmpty(data[propName])) {
          arrayValue = [];
          ref1 = data[propName];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            item = ref1[j];
            result = this.start({
              arrayField: item
            }, {
              arrayField: vdtrObject.ARR
            });
            if (result != null ? result.data.arrayField : void 0) {
              arrayValue.push(result.data.arrayField);
            }
            valid = valid && !!(result != null ? result.valid : void 0);
            if (result.message) {
              message += result.message + '\n';
            }
          }
          dataOut[propName] = arrayValue;
        }
      }
      return {
        data: dataOut,
        valid: valid,
        message: message
      };
    },
    checkData: function(data, vdtrName, vdtrValue) {
      var ref, ref1, result;
      if (((ref = this.types[vdtrName]) != null ? ref.fn : void 0) && _.isFunction((ref1 = this.types[vdtrName]) != null ? ref1.fn : void 0)) {
        result = this.types[vdtrName].fn(data, vdtrValue);
        return {
          data: (result != null ? result.data : void 0) ? result.data : data,
          valid: !!(result != null ? result.valid : void 0),
          message: result.message || ''
        };
      } else {
        return {
          data: data,
          valid: false,
          message: "Validator object for " + vdtrName + " not defined."
        };
      }
    },
    validate: function(origData, schema) {
      return this.start(origData, schema);
    },
    quick: function(origData, schema) {
      var result;
      result = this.start(origData, schema);
      if (result.valid) {
        return result.data;
      }
      return void 0;
    }
  };

}).call(this);
